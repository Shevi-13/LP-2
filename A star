import heapq

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Directions for movement (row, col)
moves = {
    'up': (-1, 0),
    'down': (1, 0),
    'left': (0, -1),
    'right': (0, 1)
}

# Helper to find the position of 0 (empty space)
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Manhattan Distance Heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_i, goal_j = divmod(val - 1, 3)
                distance += abs(goal_i - i) + abs(goal_j - j)
    return distance

# Convert state (list of lists) to a tuple for hashing
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

# Generate neighbors
def get_neighbors(state):
    neighbors = []
    x, y = find_zero(state)

    for move, (dx, dy) in moves.items():
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)

    return neighbors

# A* algorithm
def a_star(start_state):
    start_tuple = state_to_tuple(start_state)
    goal_tuple = state_to_tuple(goal_state)
    frontier = []
    heapq.heappush(frontier, (0 + manhattan_distance(start_state), 0, start_state))
    came_from = {start_tuple: None}
    cost_so_far = {start_tuple: 0}

    while frontier:
        _, cost, current = heapq.heappop(frontier)
        current_tuple = state_to_tuple(current)

        if current_tuple == goal_tuple:
            path = []
            while current_tuple:
                path.append(current)
                current_tuple = state_to_tuple(current)
                current = came_from[current_tuple]
            path.reverse()
            return path

        for neighbor in get_neighbors(current):
            neighbor_tuple = state_to_tuple(neighbor)
            new_cost = cost_so_far[state_to_tuple(current)] + 1

            if neighbor_tuple not in cost_so_far or new_cost < cost_so_far[neighbor_tuple]:
                cost_so_far[neighbor_tuple] = new_cost
                priority = new_cost + manhattan_distance(neighbor)
                heapq.heappush(frontier, (priority, new_cost, neighbor))
                came_from[neighbor_tuple] = current

    return None

# Print the board
def print_board(state):
    for row in state:
        print(" ".join(str(x) if x != 0 else ' ' for x in row))
    print()

# Example usage
start_state = [
    [2, 8, 3],
    [1, 6, 4],
    [7, 0, 5]
]

solution = a_star(start_state)

if solution:
    print(f"Solution found in {len(solution) - 1} moves:\n")
    for step in solution:
        print_board(step)
else:
    print("No solution found.")
